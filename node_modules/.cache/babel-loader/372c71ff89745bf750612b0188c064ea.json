{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport { projectFirestore } from \"../Firebase/config\";\n\nconst useFirestore = collection => {\n  const [docs, setDocs] = useState();\n  useEffect(() => {\n    // update listener that update the grid when a new image is uploaded\n    const unsub = projectFirestore.collection(collection).orderBy(\"createdAt\", \"desc\").onSnapshot(snap => {\n      let documents = [];\n      snap.forEach(doc => {\n        documents.push({ ...doc.data(),\n          id: doc.id\n        });\n      });\n      setDocs(documents);\n    }); // cleanup function, unsubscribe from the collection when we no longer use it\n\n    return () => unsub();\n  }, [collection]);\n  return {\n    docs\n  };\n};\n\nexport default useFirestore;","map":{"version":3,"sources":["/Users/marketing/Documents/MyProjectWBS/finalWBSproject/src/components/Hooks/useFirestore.js"],"names":["useState","useEffect","projectFirestore","useFirestore","collection","docs","setDocs","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;;AAEA,MAAMC,YAAY,GAAIC,UAAD,IAAgB;AACnC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,EAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMM,KAAK,GAAGL,gBAAgB,CAC3BE,UADW,CACAA,UADA,EAEXI,OAFW,CAEH,WAFG,EAEU,MAFV,EAGXC,UAHW,CAGCC,IAAD,IAAU;AACpB,UAAIC,SAAS,GAAG,EAAhB;AACAD,MAAAA,IAAI,CAACE,OAAL,CAAcC,GAAD,IAAS;AACpBF,QAAAA,SAAS,CAACG,IAAV,CAAe,EAAE,GAAGD,GAAG,CAACE,IAAJ,EAAL;AAAiBC,UAAAA,EAAE,EAAEH,GAAG,CAACG;AAAzB,SAAf;AACD,OAFD;AAGAV,MAAAA,OAAO,CAACK,SAAD,CAAP;AACD,KATW,CAAd,CAFc,CAYd;;AACA,WAAO,MAAMJ,KAAK,EAAlB;AACD,GAdQ,EAcN,CAACH,UAAD,CAdM,CAAT;AAgBA,SAAO;AAAEC,IAAAA;AAAF,GAAP;AACD,CApBD;;AAsBA,eAAeF,YAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { projectFirestore } from \"../Firebase/config\";\n\nconst useFirestore = (collection) => {\n  const [docs, setDocs] = useState();\n\n  useEffect(() => {\n    // update listener that update the grid when a new image is uploaded\n    const unsub = projectFirestore\n      .collection(collection)\n      .orderBy(\"createdAt\", \"desc\")\n      .onSnapshot((snap) => {\n        let documents = [];\n        snap.forEach((doc) => {\n          documents.push({ ...doc.data(), id: doc.id });\n        });\n        setDocs(documents);\n      });\n    // cleanup function, unsubscribe from the collection when we no longer use it\n    return () => unsub();\n  }, [collection]);\n\n  return { docs };\n};\n\nexport default useFirestore;\n"]},"metadata":{},"sourceType":"module"}